import { useState, useEffect, useRef } from "react";
import { Phone, MessageCircle, X, Bot } from "lucide-react";

interface Message {
  role: "user" | "assistant";
  content: string;
}

interface ButtonItem {
  id: string;
  label: string;
  icon: React.ReactNode;
  color: string;
  link?: string;
  onClick?: () => void;
}


export default function FloatingContact() {
  const phoneNumber = "0339990014";
  const zaloLink = "https://zalo.me/339990014";

  const [showChat, setShowChat] = useState(false);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const chatEndRef = useRef<HTMLDivElement | null>(null);

  // Auto scroll to bottom
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  const buttons: ButtonItem[] = [
    {
      id: "zalo",
      label: "Chat tr·ª±c ti·∫øp",
      icon: <MessageCircle className="w-6 h-6" />,
      color: "from-blue-500 to-cyan-400",
      link: zaloLink,
    },
    {
      id: "bot",
      label: "AI Chatbot",
      icon: <Bot className="w-6 h-6" />,
      color: "from-purple-500 to-pink-500",
      onClick: () => setShowChat((prev) => !prev),
    },
    {
      id: "phone",
      label: "Hotline",
      icon: <Phone className="w-6 h-6" />,
      color: "from-green-500 to-emerald-400",
      link: `tel:${phoneNumber}`,
    },
  ];

  // Smart mock responses
  const getSmartResponse = (message: string): string => {
    const msg = message.toLowerCase();

    // Greetings
    if (msg.match(/^(hi|hello|xin ch√†o|ch√†o|hey|Ben|ChaÃÄo Ben)/)) {
      return "Xin ch√†o! üëã T√¥i l√† Ben Ng·ªë ‚Äì tr·ª£ l√Ω AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?";
    }

    // Help/Service questions
    if (msg.includes("gi√∫p") || msg.includes("help") || msg.includes("h·ªó tr·ª£")|| msg.includes("c√¢ÃÄn h·ªó tr·ª£")) {
      return "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n v·ªÅ:\n‚Ä¢ Th√¥ng tin s·∫£n ph·∫©m/d·ªãch v·ª•\n‚Ä¢ Gi√° c·∫£ v√† khuy·∫øn m√£i\n‚Ä¢ Li√™n h·ªá t∆∞ v·∫•n\n‚Ä¢ C√¢u h·ªèi th∆∞·ªùng g·∫∑p\n\nB·∫°n c·∫ßn bi·∫øt th√™m ƒëi·ªÅu g√¨? üòä";
    }

    // Product/Service
    if (msg.includes("s·∫£n ph·∫©m") || msg.includes("d·ªãch v·ª•") || msg.includes("product")|| msg.includes("tour") || msg.includes("service")|| msg.includes("ƒëƒÉt phoÃÄng")|| msg.includes("ƒëƒÉt tour")|| msg.includes("thu√™ phoÃÄng")) {
      return "Ch√∫ng t√¥i cung c·∫•p nhi·ªÅu s·∫£n ph·∫©m/d·ªãch v·ª• thu√™ phoÃÄng ch·∫•t l∆∞·ª£ng cao. ƒê·ªÉ t√¥i k·∫øt n·ªëi b·∫°n v·ªõi chuy√™n vi√™n t∆∞ v·∫•n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t nh√©!\nüìû Hotline: 0339990014\nüí¨ Chat Zalo: zalo.me/339990014";
    }

    // Pricing
    if (msg.includes("gi√°") || msg.includes("price") || msg.includes("bao nhi√™u") || msg.includes("cost")) {
      return "Gi√° c·∫£ c·ªßa ch√∫ng t√¥i r·∫•t c·∫°nh tranh! üí∞\n\nƒê·ªÉ bi·∫øt b√°o gi√° chi ti·∫øt cho nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n, vui l√≤ng:\nüìû G·ªçi: 0339990014\nüí¨ Zalo: zalo.me/339990014";
    }

    // Contact/Consultation
    if (msg.includes("li√™n h·ªá") || msg.includes("t∆∞ v·∫•n") || msg.includes("contact") || msg.includes("g·∫∑p")) {
      return "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi ch√∫ng t√¥i qua:\n\nüìû Hotline: 0339990014\nüí¨ Zalo: zalo.me/339990014\n\nBen Ng·ªë lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n 24/7! ‚ö°";
    }

    // Hours
    if (msg.includes("ngaÃÄy laÃÄm vi√™Ã£c") || msg.includes("time") || msg.includes("hours") || msg.includes("m·ªü c·ª≠a")) {
      return "‚è∞ Gi·ªù l√†m vi·ªác:\nTh·ª© 2 - Th·ª© 6: 8:00 - 18:00\nTh·ª© 7: 8:00 - 17:00\nCh·ªß nh·∫≠t: Ngh·ªâ\n\nHotline h·ªó tr·ª£ 24/7: 0339990014";
    }

    // Location
    if (msg.includes("ƒë·ªãa ch·ªâ") || msg.includes("·ªü ƒë√¢u") || msg.includes("location") || msg.includes("address")) {
      return "üìç ƒê·ªãa ch·ªâ c·ªßa ch√∫ng t√¥i:\n[Th√™m ƒë·ªãa ch·ªâ c·ª• th·ªÉ t·∫°i ƒë√¢y]\n\nLi√™n h·ªá hotline: 0339990014 ƒë·ªÉ ƒë∆∞·ª£c h∆∞·ªõng d·∫´n chi ti·∫øt!";
    }

    // Thanks
    if (msg.match(/c·∫£m ∆°n|thanks|thank you|c√°m ∆°n/)) {
      return "R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n! üåü N·∫øu c·∫ßn th√™m th√¥ng tin, ƒë·ª´ng ng·∫°i li√™n h·ªá:\nüìû 0339990014\nüí¨ zalo.me/339990014\n\n‚Äì Ben Ng·ªë ü§ñ";
    }

    // Goodbye
    if (msg.match(/bye|t·∫°m bi·ªát|goodbye|h·∫πn g·∫∑p l·∫°i/)) {
      return "T·∫°m bi·ªát nh√©! üëã Ben Ng·ªë ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üòä";
    }

    // Default
    return "C·∫£m ∆°n b·∫°n ƒë√£ nh·∫Øn tin! üòä\n\nƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c nh·∫•t, vui l√≤ng li√™n h·ªá:\nüìû 0339990014\nüí¨ zalo.me/339990014\n\nBen Ng·ªë s·∫Ω ph·∫£n h·ªìi ngay khi c√≥ th·ªÉ ‚ö°";
  };

  const sendMessage = async () => {
    if (!input.trim()) return;

    const userMsg: Message = { role: "user", content: input };
    setMessages((prev) => [...prev, userMsg]);
    setInput("");
    setLoading(true);

    // Simulate typing delay
    setTimeout(() => {
      const botResponse = getSmartResponse(input);
      const botMsg: Message = { role: "assistant", content: botResponse };
      setMessages((prev) => [...prev, botMsg]);
      setLoading(false);
    }, 800 + Math.random() * 700);
  };

  return (
    <>
      {/* Floating Buttons */}
      <div className="fixed bottom-6 right-6 flex flex-col items-center gap-3 z-[9999]">
        {buttons.map((btn) => (
          <div key={btn.id} className="group flex items-center gap-2 relative">
            {/* Tooltip */}
            <span className="absolute right-16 px-3 py-1 bg-gray-900 text-white text-xs rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap pointer-events-none shadow-lg">
              {btn.label}
            </span>

            {/* Button */}
            {btn.link ? (
              <a
                href={btn.link}
                target="_blank"
                rel="noopener noreferrer"
                className={`w-14 h-14 rounded-full bg-gradient-to-br ${btn.color} text-white shadow-xl flex items-center justify-center hover:shadow-2xl hover:scale-110 transition-all duration-200`}
              >
                {btn.icon}
              </a>
            ) : (
              <button
                onClick={btn.onClick}
                className={`w-14 h-14 rounded-full bg-gradient-to-br ${btn.color} text-white shadow-xl flex items-center justify-center hover:shadow-2xl hover:scale-110 transition-all duration-200`}
              >
                {btn.icon}
              </button>
            )}
          </div>
        ))}
      </div>

      {/* Chatbot Popup */}
      {showChat && (
        <div className="fixed bottom-24 right-6 bg-white rounded-2xl shadow-2xl w-80 h-[500px] flex flex-col z-[9999] overflow-hidden border border-purple-200">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-500 to-pink-500 text-white p-4 font-semibold flex items-center justify-between">
            <div className="flex items-center gap-2">
              <div className="relative">
                <Bot className="w-6 h-6" />
                <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white"></div>
              </div>
              <div>
                <div className="text-sm font-bold">Ben Ng·ªë Chatbot</div>
                <div className="text-xs opacity-90">ƒêang ho·∫°t ƒë·ªông</div>
              </div>
            </div>
            <button
              onClick={() => setShowChat(false)}
              className="hover:bg-white/20 rounded-full p-1.5 transition-colors"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 text-sm overflow-y-auto space-y-3 bg-gradient-to-b from-gray-50 to-white">
            {messages.length === 0 && (
              <div className="text-center text-gray-500 mt-12">
                <div className="w-16 h-16 bg-gradient-to-br from-purple-100 to-pink-100 rounded-full flex items-center justify-center mx-auto mb-3">
                  <Bot className="w-8 h-8 text-purple-500" />
                </div>
                <p className="font-semibold text-gray-700">
                  Xin ch√†o! T√¥i l√† <span className="text-purple-600">Ben Ng·ªë ü§ñ</span>
                </p>
                <p className="text-xs mt-2 px-4">
                  H·ªèi t√¥i v·ªÅ s·∫£n ph·∫©m, d·ªãch v·ª•, gi√° c·∫£ ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨ b·∫°n c·∫ßn nh√©!
                </p>

                <div className="mt-4 space-y-2">
                  {["S·∫£n ph·∫©m c·ªßa b·∫°n?", "B·∫£ng gi√° nh∆∞ th·∫ø n√†o?", "Li√™n h·ªá t∆∞ v·∫•n"].map((q) => (
                    <button
                      key={q}
                      onClick={() => setInput(q)}
                      className="text-xs bg-purple-50 text-purple-600 px-3 py-1.5 rounded-full hover:bg-purple-100 transition-colors"
                    >
                      {q}
                    </button>
                  ))}
                </div>
              </div>
            )}

            {messages.map((msg, i) => (
              <div key={i} className={`flex ${msg.role === "user" ? "justify-end" : "justify-start"}`}>
                <div
                  className={`p-3 rounded-2xl max-w-[85%] break-words whitespace-pre-line ${
                    msg.role === "user"
                      ? "bg-gradient-to-br from-purple-500 to-pink-500 text-white rounded-br-sm shadow-md"
                      : "bg-white border border-gray-200 text-gray-800 rounded-bl-sm shadow-sm"
                  }`}
                >
                  {msg.content}
                </div>
              </div>
            ))}

            {loading && (
              <div className="flex items-center gap-2 text-gray-400 italic text-xs">
                <div className="flex gap-1 bg-white border border-gray-200 rounded-full px-3 py-2 shadow-sm">
                  <div className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"></div>
                  <div
                    className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.1s" }}
                  ></div>
                  <div
                    className="w-2 h-2 bg-purple-400 rounded-full animate-bounce"
                    style={{ animationDelay: "0.2s" }}
                  ></div>
                </div>
              </div>
            )}

            <div ref={chatEndRef} />
          </div>

          {/* Input */}
          <div className="p-3 border-t bg-white flex gap-2">
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && !loading && sendMessage()}
              type="text"
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              disabled={loading}
              className="flex-1 border border-gray-300 rounded-full px-4 py-2.5 text-sm focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent disabled:bg-gray-100 disabled:cursor-not-allowed"
            />
            <button
              onClick={sendMessage}
              disabled={loading || !input.trim()}
              className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-5 py-2.5 rounded-full text-sm font-medium hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
            >
              G·ª≠i
            </button>
          </div>
        </div>
      )}
    </>
  );
}
